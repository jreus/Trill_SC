# See: https://cmake.org/cmake-tutorial/ for getting started with cmake

# IMPORTANT: anything printed here with message() will not be displayed

project(${PROJECT})
set(FILENAME "${PROJECT}.cpp")
set(CMAKE_BUILD_TYPE Release) # this has to come after project()
set(CMAKE_CXX_FLAGS "-O3 ${CMAKE_CXX_FLAGS}")
set(CMAKE_C_FLAGS "-O3 ${CMAKE_C_FLAGS}")

set(BELA_PATH /root/Bela/)

if (SC_PATH AND SC_INCLUDE_PATH)
    message(FATAL_ERROR "Cannot define both SC_PATH and SC_INCLUDE_PATH. Try -USC_INCLUDE_PATH or -USC_PATH to remove any lingering one from cache")
endif (SC_PATH AND SC_INCLUDE_PATH)

if (SC_PATH)
    set(SC_INCLUDE_PATH ${SC_PATH}/include)
    include_directories(${SC_PATH}/common)
else (SC_PATH)
    if (NOT SC_INCLUDE_PATH)
        set(SC_INCLUDE_PATH /usr/include/SuperCollider) #Â a reasonable guess on Bela
    endif (NOT SC_INCLUDE_PATH)
endif (SC_PATH)

# Include all the search directories
include_directories(${SC_INCLUDE_PATH}/plugin_interface)
include_directories(${SC_INCLUDE_PATH}/common)
include_directories(${BELA_PATH}/include)
include_directories(${BELA_PATH}/libraries/Trill/)

set(CMAKE_SHARED_MODULE_PREFIX "")
if(APPLE OR WIN32)
set(CMAKE_SHARED_MODULE_SUFFIX ".scx")
endif()


option(SUPERNOVA "Build plugins for supernova" OFF)
if (SUPERNOVA)
    include_directories(${SC_PATH}/external_libraries/nova-tt)
    # actually just boost.atomic
    include_directories(${SC_PATH}/external_libraries/boost)
    include_directories(${SC_PATH}/external_libraries/boost_lockfree)
    include_directories(${SC_PATH}/external_libraries/boost-lockfree)
endif()

option(CPP11 "Build with c++11." ON)

if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
	set(CMAKE_COMPILER_IS_CLANG 1)
endif()

# The below monstrosity sets compiler flags for SSE (Streaming SIMD Extensions).
# Among many other things, SSE protects against denormal numbers,
# which are known to cause glitchy audio in some cases.

# Some processors do not support SSE and will produce errors if you try to add SSE flags,
# so we also have to introduce conditional logic to guard against those errors.
# It's a real mess, and generally there's no need to touch it :)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANG)
    add_definitions(-fvisibility=hidden)

    include (CheckCCompilerFlag)
    include (CheckCXXCompilerFlag)

    if(CMAKE_SYSTEM_PROCESSOR STREQUAL "armv7l")
      foreach(flag CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
        set(${flag} "${${flag}} -mfloat-abi=hard")
        set(${flag} "${${flag}} -mfpu=neon")
        set(${flag} "${${flag}} -ftree-vectorize")
        set(${flag} "${${flag}} -ffast-math")
      endforeach()
    else()
        CHECK_C_COMPILER_FLAG(-msse HAS_SSE)
        CHECK_CXX_COMPILER_FLAG(-msse HAS_CXX_SSE)

        if (HAS_SSE)
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse")
        endif()
        if (HAS_CXX_SSE)
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse")
        endif()

        CHECK_C_COMPILER_FLAG(-msse2 HAS_SSE2)
        CHECK_CXX_COMPILER_FLAG(-msse2 HAS_CXX_SSE2)

        if (HAS_SSE2)
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse2")
        endif()
        if (HAS_CXX_SSE2)
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse2")
        endif()

        CHECK_C_COMPILER_FLAG(-mfpmath=sse HAS_FPMATH_SSE)
        CHECK_CXX_COMPILER_FLAG(-mfpmath=sse HAS_CXX_FPMATH_SSE)

        if (HAS_FPMATH_SSE)
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mfpmath=sse")
        endif()
        if (HAS_CXX_FPMATH_SSE)
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mfpmath=sse")
        endif()
    endif()

    if(NATIVE)
        add_definitions(-march=native)
    endif()

    # Plugin headers require C++11, which must be explicitly enabled for gcc and clang.
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    if(CMAKE_COMPILER_IS_CLANG)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
    endif()
endif()

if(MINGW)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mstackrealign")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mstackrealign")
endif()

# Build the shared library
add_library(${PROJECT} MODULE
  ${FILENAME}
  ${BELA_PATH}/libraries/Trill/Trill.cpp
)

if(SUPERNOVA)
    add_library(${PROJECT}_supernova MODULE ${FILENAME})
    set_property(TARGET ${PROJECT}_supernova
                 PROPERTY COMPILE_DEFINITIONS SUPERNOVA)
endif()
